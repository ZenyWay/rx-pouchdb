(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";var Promise=require("bluebird"),rxjs_1=require("rxjs"),jasmine_bluebird_1=require("./support/jasmine-bluebird"),assert_1=require("assert"),src_1=require("../src"),debug=require("debug");debug.disable();var pouchdbMock,dbIoMock,types,rxPouchDbObject;beforeEach(function(){pouchdbMock=jasmine.createSpyObj("pouchdbMock",["get","put","allDocs","bulkDocs"]),dbIoMock=jasmine.createSpyObj("dbIoMock",["write","read"]),types=[void 0,null,NaN,!0,42,"foo",[42],{foo:"foo"}],rxPouchDbObject=jasmine.objectContaining({write:jasmine.any(Function),read:jasmine.any(Function)})}),describe("factory newRxPouchDb (db: Object|Promise<Object>, opts?: RxPouchDbFactoryOpts): RxPouchDb",function(){it("should expose a `defaults` object property { read: ReadOpts, write: WriteOpts }",function(){expect(src_1.default.defaults).toEqual({write:jasmine.any(Object),read:jasmine.any(Object)})}),describe("when called with a non-null `db` Object argument",function(){var e;beforeEach(function(){e=[pouchdbMock,Promise.resolve(pouchdbMock)]}),it("should return a `RxPouchDb` object with `write` and `read` methods",function(){e.forEach(function(e){return expect(src_1.default(e)).toEqual(rxPouchDbObject)})})}),describe("when called without a `db` argument, or with a `db` argument that is not a non-null Object",function(){it("should throw an `AssertionError` with `invalid argument`",function(){types.filter(function(e){return!e||"object"!=typeof e}).forEach(function(e){return expect(function(){return src_1.default(e)}).toThrowError("invalid argument")})})}),describe("when called with a `db` argument that is not PouchDB-like, or that resolves to an instance that is not PouchDB-like",function(){var e,t;beforeEach(function(){t=[{_id:"foo"}],e=types.filter(function(e){return e&&"object"==typeof e}).reduce(function(e,t){return e.concat([t,Promise.resolve(t)])},[]).map(function(e){return src_1.default(e)})}),it("should return a `RxPouchDb` object with `write` and `read` methods that emit an `invalid PouchDB instance` AssertionError",function(r){rxjs_1.Observable.from(e.reduce(function(e,r){return e.concat([r.write(t),r.read(t)])},[]).map(function(e){return e.isEmpty().catch(function(e,t){return expect(e).toEqual(jasmine.any(assert_1.AssertionError)),expect(e.message).toBe("invalid PouchDB instance"),rxjs_1.Observable.empty()})})).mergeAll().subscribe(jasmine_bluebird_1.schedule(r.fail),jasmine_bluebird_1.schedule(r.fail),jasmine_bluebird_1.schedule(r))})}),describe("when called with an `opts` argument",function(){describe("with an `opts.dbIo` instance",function(){describe("that is DbIo-like or resolve to a DbIo-like instance",function(){beforeEach(function(e){var t=src_1.default(pouchdbMock,{dbIo:dbIoMock});dbIoMock.write.and.returnValue(rxjs_1.Observable.empty()),t.write([{_id:"foo"}]).subscribe(function(){},jasmine_bluebird_1.schedule(e),jasmine_bluebird_1.schedule(e))}),it("should inject it in place of the default DbIo dependency",function(){expect(dbIoMock.write).toHaveBeenCalled()})}),describe("that is not DbIo-like but truthy",function(){it("should throw an `invalid argument` AssertionError",function(){types.filter(function(e){return e}).forEach(function(e){expect(function(){return src_1.default(pouchdbMock,{dbIo:e})}).toThrowError(assert_1.AssertionError,"invalid argument")})})})})})}),describe("interface RxPouchDb: { write: Function, read: Function}",function(){var e,t,r;beforeEach(function(){e=src_1.default(pouchdbMock),t=jasmine.createSpy("next"),r=jasmine.createSpy("error")}),describe("RxPouchDb#write: <D extends VersionedDoc[]|VersionedDoc> (docs: Observable<D>|PromiseLike<D>|ArrayLike<D>) => Observable<DocRef[]|DocRef>",function(){describe("when given an Observable, a Promise-like or an Array-like object",function(){var n;beforeEach(function(){n=function(e){return{ok:!0,id:e._id,rev:e._rev}}}),it("should return an Observable",function(){[rxjs_1.Observable.from(["foo"]),Promise.resolve("foo"),["foo"]].map(function(t){return e.write(t)}).forEach(function(e){return expect(e).toEqual(jasmine.any(rxjs_1.Observable))})}),describe("that emits a document object extending { _id: string, _rev?: string }",function(){var o,i;beforeEach(function(a){o={_id:"foo"},i={_id:"foo",_rev:"bar"},pouchdbMock.put.and.returnValue(Promise.resolve(n(i))),e.write(rxjs_1.Observable.of(o)).do(t,r,function(){}).subscribe(function(){},jasmine_bluebird_1.schedule(a),jasmine_bluebird_1.schedule(a))}),it("should store that document in the wrapped db",function(){expect(pouchdbMock.put.calls.allArgs()).toEqual([jasmine.arrayContaining([o])])}),it("should return an Observable that emits the { _id: string, _rev: string } reference returned from the db",function(){expect(t.calls.allArgs()).toEqual([[i]]),expect(r).not.toHaveBeenCalled()})}),describe("that emits an array of document objects extending { _id: string, _rev?: string }",function(){var o,i;beforeEach(function(a){o=[{_id:"foo"},{_id:"bar"}],i=[{_id:"foo",_rev:"foo"},{_id:"bar",_rev:"bar"}],pouchdbMock.bulkDocs.and.returnValue(Promise.resolve(i.map(n))),e.write(rxjs_1.Observable.of(o)).do(t,r,function(){}).subscribe(function(){},jasmine_bluebird_1.schedule(a),jasmine_bluebird_1.schedule(a))}),it("should store all documents from the array in the wrapped db",function(){expect(pouchdbMock.bulkDocs.calls.allArgs()).toEqual([jasmine.arrayContaining([o])])}),it("should return an Observable that emits an array of the { _id: string, _rev: string } references returned from the db",function(){expect(t.calls.allArgs()).toEqual([[i]]),expect(r).not.toHaveBeenCalled()})}),describe("that emits anything else then a single valid document, or an array of valid documents extending { _id: string, _rev?: string }",function(){var t;beforeEach(function(){var r=types.filter(function(e){return"string"!=typeof e}).reduce(function(e,t){return e.concat([{_id:t}]).concat(t?[{_id:"foo",_rev:t}]:[])},[]).concat(types).reduce(function(e,t){return e.concat([t,[t]])},[]);t=r.map(function(t){return e.write(rxjs_1.Observable.of(t))})}),it("should emit an `invalid document` AssertionError",function(e){rxjs_1.Observable.from(t.map(function(e){return e.isEmpty().catch(function(e,t){return expect(e).toEqual(jasmine.any(assert_1.AssertionError)),expect(e.message).toBe("invalid document"),rxjs_1.Observable.empty()})})).mergeAll().subscribe(jasmine_bluebird_1.schedule(e.fail),jasmine_bluebird_1.schedule(e.fail),jasmine_bluebird_1.schedule(e))})})})}),describe("RxPouchDb#read: <R extends DocRef[]|DocIdRange|DocRevs|DocRef, D extends VersionedDoc|(VersionedDoc&DocRevStatus)> (refs: Observable<R>|PromiseLike<R>|ArrayLike<R>) => Observable<D[]|D>",function(){describe("when given an Observable, a Promise-like or an Array-like object",function(){it("should return an Observable",function(){[rxjs_1.Observable.from(["foo"]),Promise.resolve("foo"),["foo"]].map(function(t){return e.read(t)}).forEach(function(e){return expect(e).toEqual(jasmine.any(rxjs_1.Observable))})}),describe("that emits a valid document reference object { _id: string, _rev?: string }",function(){var n;beforeEach(function(o){n={_id:"foo",_rev:"bar"},pouchdbMock.get.and.returnValue(Promise.resolve(n)),e.read(rxjs_1.Observable.of(n)).do(t,r,function(){}).subscribe(function(){},jasmine_bluebird_1.schedule(o),jasmine_bluebird_1.schedule(o))}),it("should fetch the referenced document from the wrapped db",function(){expect(pouchdbMock.get.calls.allArgs()).toEqual([[n._id,jasmine.objectContaining({rev:n._rev})]])}),it("should return an Observable that emits the referenced document fetched from the db",function(){expect(t.calls.allArgs()).toEqual([[n]]),expect(r).not.toHaveBeenCalled()})}),describe('that emits a valid reference object of document revisions { _id: string, _revs: string[]|"all" }',function(){var n,o;beforeEach(function(i){n=[{_id:"foo",_revs:["bar"]},{_id:"foo",_revs:"all"}],o=[{_id:"foo",_rev:"bar"}],pouchdbMock.get.and.returnValue(Promise.resolve(o.map(function(e){return{ok:e}}))),e.read(rxjs_1.Observable.from(n)).do(t,r,function(){}).subscribe(function(){},jasmine_bluebird_1.schedule(i),jasmine_bluebird_1.schedule(i))}),it("should fetch the referenced document versions from the wrapped db",function(){expect(pouchdbMock.get.calls.allArgs()).toEqual(n.map(function(e){return[e._id,jasmine.objectContaining({revs:e._revs})]}))}),it("should return an Observable that emits the referenced document revisions fetched from the db",function(){expect(t.calls.allArgs()).toEqual([[o],[o]]),expect(r).not.toHaveBeenCalled()})}),describe("that emits an array of valid document reference objects [ { _id: string, _rev?: string } ]",function(){var n,o;beforeEach(function(i){n=[{_id:"foo"},{_id:"bar"}],o=[{_id:"foo",_rev:"foo"},{_id:"bar",_rev:"bar"}],pouchdbMock.allDocs.and.returnValue(Promise.resolve({rows:o.map(function(e){return{doc:e}})})),e.read(rxjs_1.Observable.of(n)).do(t,r,function(){}).subscribe(function(){},jasmine_bluebird_1.schedule(i),jasmine_bluebird_1.schedule(i))}),it("should fetch all documents referenced in the array from the wrapped db",function(){expect(pouchdbMock.allDocs.calls.allArgs()).toEqual([[jasmine.objectContaining({keys:n.map(function(e){return e._id})})]])}),it("should return an Observable that emits an array of the documents fetched from the db",function(){expect(t.calls.allArgs()).toEqual([[o]]),expect(r).not.toHaveBeenCalled()})}),describe("that emits a valid document id range object { startkey: string, endkey: string }",function(){var n,o;beforeEach(function(i){n={startkey:"foo",endkey:"bar"},o=[{_id:"foo",_rev:"foo"},{_id:"bar",_rev:"bar"}],pouchdbMock.allDocs.and.returnValue(Promise.resolve({rows:o.map(function(e){return{doc:e}})})),e.read(rxjs_1.Observable.of(n)).do(t,r,function(){}).subscribe(function(){},jasmine_bluebird_1.schedule(i),jasmine_bluebird_1.schedule(i))}),it("should fetch the referenced documents from the wrapped db",function(){expect(pouchdbMock.allDocs.calls.allArgs()).toEqual([[jasmine.objectContaining(n)]]),expect(pouchdbMock.allDocs).not.toHaveBeenCalledWith(jasmine.objectContaining({key:jasmine.any(String)})),expect(pouchdbMock.allDocs).not.toHaveBeenCalledWith(jasmine.objectContaining({keys:jasmine.any(Array)}))}),it("should return an Observable that emits the referenced documents fetched from the db",function(){expect(t.calls.allArgs()).toEqual([[o]]),expect(r).not.toHaveBeenCalled()})})})})});
},{"../src":5,"./support/jasmine-bluebird":2,"assert":undefined,"bluebird":undefined,"debug":undefined,"rxjs":undefined}],2:[function(require,module,exports){
"use strict";function schedule(n,e){return function(r){return setTimeout(n.bind(void 0,e||r))}}function unwrap(n,e){var r={};return n.then(function(n){return r.val=n}).catch(function(n){return r.err=n}).finally(schedule(e)),r}exports.schedule=schedule,exports.unwrap=unwrap;
},{}],3:[function(require,module,exports){
"use strict";function coreDbIoKeyFor(e){return!e||utils_1.isString(e._id)?"unit":"bulk"}function isPouchDbLike(e){return utils_1.isObject(e)&&["get","put","allDocs","bulkDocs"].every(function(r){return utils_1.isFunction(e[r])})}function isValidDocRefOrRevs(e){return isValidDocRef(e)&&(!e._revs||utils_1.isString(e._revs)||Array.isArray(e._revs))}function isValidDocRef(e){return isValidDocId(e)&&(!e._rev||utils_1.isString(e._rev))}function isValidDocId(e){return utils_1.isObject(e)&&utils_1.isString(e._id)}function isValidDocRefArray(e){return Array.isArray(e)&&e.every(function(e){return isValidDocRef(e)})}function isValidDocIdRange(e){return utils_1.isObject(e)&&utils_1.isString(e.startkey)&&utils_1.isString(e.endkey)}function unitOptsFrom(e){return utils_1.isString(e._rev)?{rev:e._rev}:{revs:e._revs}}function bulkOptsFrom(e){return Array.isArray(e)?{keys:e.map(function(e){return e._id})}:e}function toDocRefs(e){return e.map(toDocRef)}function toDocRef(e){return e.ok?{_id:e.id,_rev:e.rev}:e}function docsFromRevs(e){return Array.isArray(e)?e.map(function(e){return e.ok}):e}var Promise=require("bluebird"),assert=require("assert"),tslib_1=require("tslib"),utils_1=require("./utils"),CoreDbIoClass=function(){function e(e){this.db=e}return Object.defineProperty(e,"factories",{get:function(){return{write:CoreDbWriteClass.newInstance,read:CoreDbReadClass.newInstance}},enumerable:!0,configurable:!0}),e.prototype.access=function(e){var r=coreDbIoKeyFor(e),t=this[r].bind(this);return Promise.try(function(){return t(e)})},e}();CoreDbIoClass.newInstance=function(e){assert(isPouchDbLike(e.db),"invalid PouchDB instance");var r=CoreDbIoClass.factories[e.type];return r(e)},CoreDbIoClass.isCoreDbIoLike=function(e){return utils_1.isObject(e)&&utils_1.isFunction(e.access)};var CoreDbWriteClass=function(e){function r(r,t){var i=e.call(this,r)||this;return i.spec=t,i}return __extends(r,e),r.prototype.unit=function(e){return assert(isValidDocRef(e),"invalid document"),this.db.put(e,this.spec).then(toDocRef)},r.prototype.bulk=function(e){return assert(isValidDocRefArray(e),"invalid document"),this.db.bulkDocs(e,this.spec).then(toDocRefs)},r}(CoreDbIoClass);CoreDbWriteClass.newInstance=function(e){return new CoreDbWriteClass(e.db,e.opts)};var CoreDbReadClass=function(e){function r(r,t){var i=e.call(this,r)||this;return i.spec=t,i}return __extends(r,e),r.prototype.unit=function(e){assert(isValidDocRefOrRevs(e),"invalid document reference");var r=tslib_1.__assign({},this.spec,unitOptsFrom(e));return this.db.get(e._id,r).then(docsFromRevs)},r.prototype.bulk=function(e){assert(isValidDocRefArray(e)||isValidDocIdRange(e),"invalid document reference");var r=tslib_1.__assign({},this.spec,bulkOptsFrom(e));return this.db.allDocs(r).then(function(e){return e.rows.map(function(e){return e.doc})})},r}(CoreDbIoClass);CoreDbReadClass.newInstance=function(e){return new CoreDbReadClass(e.db,e.opts)},exports.isCoreDbIoLike=CoreDbIoClass.isCoreDbIoLike;var newCoreDbIo=CoreDbIoClass.newInstance;Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=newCoreDbIo;
},{"./utils":6,"assert":undefined,"bluebird":undefined,"tslib":undefined}],4:[function(require,module,exports){
"use strict";function getCoreDbIo(e,r,o){return core_db_io_1.isCoreDbIoLike(o)?o:core_db_io_1.default({db:e,type:r,opts:o})}var rxjs_1=require("rxjs"),core_db_io_1=require("./core-db-io"),utils_1=require("./utils"),DbIoClass=function(){function e(e){this.coreDbIo=e}return e.prototype.write=function(e){return rxjs_1.Observable.fromPromise(Promise.resolve(this.coreDbIo.write.access(e)))},e.prototype.read=function(e){return rxjs_1.Observable.fromPromise(Promise.resolve(this.coreDbIo.read.access(e)))},e}();DbIoClass.newInstance=function(e,r){var o={write:getCoreDbIo(e,"write",r.coreDbIo||r.write),read:getCoreDbIo(e,"read",r.coreDbIo||r.read)};return new DbIoClass(o)},DbIoClass.isDbIoLike=function(e){return utils_1.isObject(e)&&utils_1.isFunction(e.write)&&utils_1.isFunction(e.read)},exports.isDbIoLike=DbIoClass.isDbIoLike;var newDbIo=DbIoClass.newInstance;Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=newDbIo;

},{"./core-db-io":3,"./utils":6,"rxjs":undefined}],5:[function(require,module,exports){
"use strict";function isValidFactoryOpts(e){return!e||utils_1.isObject(e)&&(!e.dbIo||db_io_1.isDbIoLike(e.dbIo))}function dbIoFactorySpecFrom(e){return{read:tslib_1.__assign({},RxPouchDbClass.newInstance.defaults.read,e&&e.read),write:tslib_1.__assign({},RxPouchDbClass.newInstance.defaults.write,e&&e.write)}}function toObservable(e){try{return rxjs_1.Observable.from(e)}catch(e){return rxjs_1.Observable.throw(e)}}var Promise=require("bluebird"),rxjs_1=require("rxjs"),assert=require("assert"),tslib_1=require("tslib"),db_io_1=require("./db-io"),utils_1=require("./utils"),RxPouchDbClass=function(){function e(e){this.dbIo=e}return e.prototype.write=function(e){return this.access("write",e)},e.prototype.read=function(e){return this.access("read",e)},e.prototype.access=function(e,r){var t=toObservable(r).do(utils_1.logRx("rx-pouchdb:"+e+":src")).share();return this.dbIo.switchMap(function(r){return t.concatMap(function(t){return r[e](t)})}).do(utils_1.logRx("rx-pouchdb:"+e)).share()},e}();RxPouchDbClass.newInstance=function(e,r){assert(utils_1.isObject(e)&&isValidFactoryOpts(r),"invalid argument");var t=r&&r.dbIo?Promise.resolve(r.dbIo):Promise.try(function(){return db_io_1.default(e,dbIoFactorySpecFrom(r))});return new RxPouchDbClass(rxjs_1.Observable.from(t))},RxPouchDbClass.newInstance.defaults={read:{revs:!1,revs_info:!1,conflicts:!1,attachments:!1,binary:!1,include_docs:!1},write:{}};var getRxPouchDb=RxPouchDbClass.newInstance;Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=getRxPouchDb;

},{"./db-io":4,"./utils":6,"assert":undefined,"bluebird":undefined,"rxjs":undefined,"tslib":undefined}],6:[function(require,module,exports){
"use strict";function isObject(t){return!!t&&"object"==typeof t}function isFunction(t){return"function"==typeof t}function isString(t){return"string"==typeof t}function logRx(t){return{next:debug(t+":next"),error:debug(t+":err"),complete:function(){return debug(t+":done")("")}}}var debug=require("debug");exports.isObject=isObject,exports.isFunction=isFunction,exports.isString=isString,exports.logRx=logRx;
},{"debug":undefined}]},{},[1]);
